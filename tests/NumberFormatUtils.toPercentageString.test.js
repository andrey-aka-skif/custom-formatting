/*
1. По умолчанию пишем три значащих цифры. То есть если число порядка единиц, то до сотых долей; если порядка десятков, то до десятых: 1,15 А, 86,9 %.
Если число порядка десятых, то до тысячных: 0,654 А.
Если сотни, то 230 В, 218 В и т.п.
2. Если меньше 0,1, то в стандартном виде: 2,82*10^-2
3. Однако, если число в процентах, то пишем строго до десятых долей: 100,0%, 65,4%, 0,1%. 
Потому что в процентах мы измеряем разного рода расхождения и несимметричности, и если они на уровне 0,1%, то в них нет большого смысла. 
То есть число меньше 0,05% - можем спокойно округлять до 0,0% и писать 0,0%.
4. Если число больше 1000, то писать в стандартном виде, сохраняя три значащих цифры: 4,52*10^3 Вт
*/

import { describe, it, expect } from 'vitest'
import { NumberFormatUtils } from '../src/numberFormatUtils'

describe('Передаем неподходящие значения', () => {
    it('Когда не переданы параметры, вернуть пустую строку', () => {
        expect(NumberFormatUtils.toPercentageString()).toBe('')
    })

    it('null -> "". Когда передан null, вернуть пустую строку', () => {
        expect(NumberFormatUtils.toPercentageString(null)).toBe('')
    })

    it('"" -> "". Когда передана пустая строка, вернуть пустую строку', () => {
        expect(NumberFormatUtils.toPercentageString('')).toBe('')
    })

    it('"asdf" -> "". Когда передана некорректная строка, вернуть пустую строку', () => {
        expect(NumberFormatUtils.toPercentageString('asdf')).toBe('')
    })

    it('new Date() -> "". Когда передана дата, вернуть пустую строку', () => {
        expect(NumberFormatUtils.toPercentageString(new Date())).toBe('')
    })

    it('{} -> "". Когда передан объект, вернуть пустую строку', () => {
        expect(NumberFormatUtils.toPercentageString({})).toBe('')
    })

    it('"-2,16" -> "". Когда разделитель в строке не равен точке, вернуть пустую строку', () => {
        expect(NumberFormatUtils.toPercentageString('-2,16')).toBe('')
    })
})

describe('Передаем корректные значения в виде строки', () => {
    it('"-2.16" -> "-2.2". Число передано строкой, вернуть корректное число', () => {
        expect(NumberFormatUtils.toPercentageString('-2.16')).toBe('-2.2')
    })
})

describe('Передаем корректные значения', () => {
    it('-2.16 -> "-2.2". Отрицательное число, вернуть число, округленное по банковским правилам в большую сторону', () => {
        expect(NumberFormatUtils.toPercentageString(-2.16)).toBe('-2.2')
    })

    it('0 -> "0.0". Число равно нулю, вернуть ноль и ноль десятых - n,0', () => {
        expect(NumberFormatUtils.toPercentageString(2)).toBe('2.0')
    })

    it('0.04 -> "0.0". Число менее 0.1, вернуть ноль и ноль десятых - n,0', () => {
        expect(NumberFormatUtils.toPercentageString(2)).toBe('2.0')
    })

    it('2 -> "2.0". Целое число процентов, вернуть само число и ноль десятых - n,0', () => {
        expect(NumberFormatUtils.toPercentageString(2)).toBe('2.0')
    })

    it('2.1 -> "2.1". Число содержит десятые доли, вернуть само число', () => {
        expect(NumberFormatUtils.toPercentageString(2.1)).toBe('2.1')
    })

    it('2.15 -> "2.1". Число содержит сотые доли, вернуть число, округленное по банковским правилам в меньшую сторону', () => {
        expect(NumberFormatUtils.toPercentageString(2.15)).toBe('2.1')
    })

    it('2.16 -> "2.2". Число содержит сотые доли, вернуть число, округленное по банковским правилам в большую сторону', () => {
        expect(NumberFormatUtils.toPercentageString(2.16)).toBe('2.2')
    })
})
